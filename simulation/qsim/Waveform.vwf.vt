// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/14/2023 22:40:18"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ci_74LS157
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ci_74LS157_vlg_vec_tst();
// constants                                           
// general purpose registers
reg E;
reg l0a;
reg l0b;
reg l0c;
reg l0d;
reg l1a;
reg l1b;
reg l1c;
reg l1d;
reg S;
// wires                                               
wire Za;
wire Zb;
wire Zc;
wire Zd;

// assign statements (if any)                          
ci_74LS157 i1 (
// port map - connection between master ports and signals/registers   
	.E(E),
	.l0a(l0a),
	.l0b(l0b),
	.l0c(l0c),
	.l0d(l0d),
	.l1a(l1a),
	.l1b(l1b),
	.l1c(l1c),
	.l1d(l1d),
	.S(S),
	.Za(Za),
	.Zb(Zb),
	.Zc(Zc),
	.Zd(Zd)
);
initial 
begin 
#1000000 $finish;
end 

// E
initial
begin
	E = 1'b1;
	E = #200000 1'b0;
end 

// l0a
initial
begin
	l0a = 1'b1;
	l0a = #100000 1'b0;
	l0a = #100000 1'b1;
	l0a = #50000 1'b0;
	l0a = #150000 1'b1;
	l0a = #50000 1'b0;
	l0a = #50000 1'b1;
	l0a = #50000 1'b0;
	l0a = #50000 1'b1;
	l0a = #200000 1'b0;
end 

// l0b
initial
begin
	l0b = 1'b1;
	l0b = #100000 1'b0;
	l0b = #50000 1'b1;
	l0b = #50000 1'b0;
	l0b = #100000 1'b1;
	l0b = #50000 1'b0;
	l0b = #50000 1'b1;
	l0b = #100000 1'b0;
	l0b = #150000 1'b1;
	l0b = #100000 1'b0;
	l0b = #50000 1'b1;
	l0b = #100000 1'b0;
	l0b = #50000 1'b1;
end 

// l0c
initial
begin
	l0c = 1'b1;
	l0c = #100000 1'b0;
	l0c = #100000 1'b1;
	l0c = #50000 1'b0;
	l0c = #150000 1'b1;
	l0c = #50000 1'b0;
	l0c = #50000 1'b1;
	l0c = #50000 1'b0;
	l0c = #50000 1'b1;
	l0c = #200000 1'b0;
end 

// l0d
initial
begin
	l0d = 1'b1;
	l0d = #100000 1'b0;
	l0d = #50000 1'b1;
	l0d = #50000 1'b0;
	l0d = #100000 1'b1;
	l0d = #50000 1'b0;
	l0d = #50000 1'b1;
	l0d = #100000 1'b0;
	l0d = #150000 1'b1;
	l0d = #100000 1'b0;
	l0d = #50000 1'b1;
	l0d = #100000 1'b0;
	l0d = #50000 1'b1;
end 

// l1a
initial
begin
	l1a = 1'b0;
	l1a = #50000 1'b1;
	l1a = #200000 1'b0;
	l1a = #25000 1'b1;
	l1a = #75000 1'b0;
	l1a = #25000 1'b1;
	l1a = #50000 1'b0;
	l1a = #25000 1'b1;
	l1a = #50000 1'b0;
	l1a = #25000 1'b1;
	l1a = #25000 1'b0;
	l1a = #25000 1'b1;
	l1a = #25000 1'b0;
	l1a = #25000 1'b1;
	l1a = #50000 1'b0;
	l1a = #125000 1'b1;
	l1a = #25000 1'b0;
	l1a = #50000 1'b1;
end 

// l1b
initial
begin
	l1b = 1'b0;
	l1b = #50000 1'b1;
	l1b = #200000 1'b0;
	l1b = #25000 1'b1;
	l1b = #75000 1'b0;
	l1b = #25000 1'b1;
	l1b = #50000 1'b0;
	l1b = #25000 1'b1;
	l1b = #50000 1'b0;
	l1b = #25000 1'b1;
	l1b = #25000 1'b0;
	l1b = #25000 1'b1;
	l1b = #25000 1'b0;
	l1b = #25000 1'b1;
	l1b = #50000 1'b0;
	l1b = #125000 1'b1;
	l1b = #25000 1'b0;
	l1b = #50000 1'b1;
end 

// l1c
initial
begin
	l1c = 1'b0;
	l1c = #50000 1'b1;
	l1c = #200000 1'b0;
	l1c = #25000 1'b1;
	l1c = #75000 1'b0;
	l1c = #25000 1'b1;
	l1c = #50000 1'b0;
	l1c = #25000 1'b1;
	l1c = #50000 1'b0;
	l1c = #25000 1'b1;
	l1c = #25000 1'b0;
	l1c = #25000 1'b1;
	l1c = #25000 1'b0;
	l1c = #25000 1'b1;
	l1c = #50000 1'b0;
	l1c = #125000 1'b1;
	l1c = #25000 1'b0;
	l1c = #50000 1'b1;
end 

// l1d
initial
begin
	l1d = 1'b0;
	l1d = #50000 1'b1;
	l1d = #200000 1'b0;
	l1d = #25000 1'b1;
	l1d = #75000 1'b0;
	l1d = #25000 1'b1;
	l1d = #50000 1'b0;
	l1d = #25000 1'b1;
	l1d = #50000 1'b0;
	l1d = #25000 1'b1;
	l1d = #25000 1'b0;
	l1d = #25000 1'b1;
	l1d = #25000 1'b0;
	l1d = #25000 1'b1;
	l1d = #50000 1'b0;
	l1d = #125000 1'b1;
	l1d = #25000 1'b0;
	l1d = #50000 1'b1;
end 

// S
initial
begin
	S = 1'b0;
	S = #220000 1'b1;
	S = #400000 1'b0;
end 
endmodule


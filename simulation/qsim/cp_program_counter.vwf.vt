// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/14/2023 19:59:39"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          cp_program_counter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cp_program_counter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg treg_BUS_0;
reg treg_BUS_1;
reg treg_BUS_2;
reg treg_Bus_3;
reg CLOCK;
reg JMP;
reg PC_INC;
reg PC_OUT;
reg RESET;
// wires                                               
wire BUS_0;
wire BUS_1;
wire BUS_2;
wire Bus_3;

// assign statements (if any)                          
assign BUS_0 = treg_BUS_0;
assign BUS_1 = treg_BUS_1;
assign BUS_2 = treg_BUS_2;
assign Bus_3 = treg_Bus_3;
cp_program_counter i1 (
// port map - connection between master ports and signals/registers   
	.BUS_0(BUS_0),
	.BUS_1(BUS_1),
	.BUS_2(BUS_2),
	.Bus_3(Bus_3),
	.CLOCK(CLOCK),
	.JMP(JMP),
	.PC_INC(PC_INC),
	.PC_OUT(PC_OUT),
	.RESET(RESET)
);
initial 
begin 
#1000000 $finish;
end 

// Bus_3
initial
begin
	treg_Bus_3 = 1'bZ;
	treg_Bus_3 = #400000 1'b1;
	treg_Bus_3 = #50000 1'bZ;
end 

// BUS_2
initial
begin
	treg_BUS_2 = 1'bZ;
	treg_BUS_2 = #400000 1'b1;
	treg_BUS_2 = #50000 1'bZ;
end 

// BUS_1
initial
begin
	treg_BUS_1 = 1'bZ;
	treg_BUS_1 = #400000 1'b1;
	treg_BUS_1 = #50000 1'bZ;
end 

// BUS_0
initial
begin
	treg_BUS_0 = 1'bZ;
	treg_BUS_0 = #400000 1'b1;
	treg_BUS_0 = #50000 1'bZ;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #25000 1'b1;
	#25000;
end 

// JMP
initial
begin
	JMP = 1'b0;
	JMP = #440000 1'b1;
	JMP = #20000 1'b0;
end 

// PC_INC
initial
begin
	PC_INC = 1'b1;
	PC_INC = #390000 1'b0;
	PC_INC = #70000 1'b1;
end 

// PC_OUT
initial
begin
	PC_OUT = 1'b0;
	PC_OUT = #390000 1'b1;
	PC_OUT = #70000 1'b0;
end 

// RESET
initial
begin
	RESET = 1'b0;
	RESET = #240000 1'b1;
	RESET = #20000 1'b0;
end 
endmodule

